
Decorator - Attach additional responsibilities to an object dynamically.
Decorators provide a flexible alternative to subclassing for extending functionality.

- In our designs we should allow behavior to be extended without the need to modify existing code.

- Design Principle #6: "Classes should be open for extension but closed for modification"

- The Decorator Pattern provides an alternative to subclassing for extending behavior
- A decorator has both a HAS-A (instance variable with reference to the component) 
  and IS-A (implements same interface or abstract class) Relationship to the Type it decorates.
- You can wrap a component with any numbers of decorators.

- Overusing Decorators can result in many small objects and make the application too complex.

Applying the Open-Closed Principle Everywhere is wasteful and unnecessary, and can lead to complex, hard-to-understand code.